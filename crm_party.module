<?php

/**
 * @file
 * Provides a generic CRM party entity.
 */

include_once("includes/crm_party.entity.inc");
include_once("includes/crm_party_type.entity.inc");

/**
 * Implements hook_entity_info().
 *
 * Define 2 entities here - the actual entity that will hold our domain 
 * specific information and an entity that holds information about the 
 * different types of entities.
 */
function crm_party_entity_info() {
  $party_info['crm_party'] = array(
    'label' => t('Party'),
    'entity class' => 'CRMParty',
    'controller class' => 'CRMPartyController',
    'base table' => 'crm_party',
    //'uri callback' => 'crm_party_uri',
    'fieldable' => TRUE,
    'module' => 'crm_party',
    'entity keys' => array(
      'id' => 'pid',
      'bundle' => 'type',
    ),
    'exportable' => TRUE,
    //'static cache' => TRUE,
    'bundles' => array(
      'individual' => array(
        'label' => t('Individual Party'),
        'admin' => array(
          'path' => 'admin/community/party/manage/individual',
          'access arguments' => array('administer parties'),
        ),
      ),
      'organisation' => array(
        'label' => t('Organisation Party'),
        'admin' => array(
          'path' => 'admin/community/party/manage/organisation',
          'access arguments' => array('administer parties'),
        ),
      ),
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Contact'),
        'custom settings' =>  FALSE,
      ),
    )
  );
  
  return $party_info;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the model types via a hook to avoid a recursion
 * issue as loading the model types requires the entity info as well.
 *
 * @todo This needs to be improved
 *
function crm_party_entity_info_alter(&$entity_info) {
  foreach (crm_party_get_types() as $type => $info) {
    $entity_info['crm_party']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/community/structure/party_types/manage/%crm_party_type',
        'real path' => 'admin/community/structure/party_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer party types'),
      ),
    );
  }
}
*/

/**
 * Implements hook_menu().
 */
function crm_party_menu() {
  $items['admin/community'] = array(
    'title' => 'Community',
    'description' => 'Manage the community',
    'page callback' => 'crm_party_admin',
    'page arguments' => array('list'),
    'access arguments' => array('administer parties'),
    'position' => 'left',
    'file' => 'crm_party.admin.inc',  
  );
  $items['admin/community/party/manage'] = array(
    'title' => 'Party Admin',
    'description' => 'Manage Contact Information',
    'page callback' => 'crm_party_info',
    'access arguments' => array('administer parties'),
  );
  $items['admin/community/party/manage/individual'] = array(
    'title' => 'Manage Individuals',
    'description' => 'Manage Contact Information',
    'page callback' => 'crm_party_manage',
    'page arguments' => array('individual'),
    'access arguments' => array('administer parties'),
  );
  $items['admin/community/party/manage/organisation'] = array(
    'title' => 'Manage Organisations',
    'description' => 'Manage Contact Information',
    'page callback' => 'crm_party_manage',
    'page arguments' => array('organisation'),
    'access arguments' => array('administer parties'),
  );

  $items['party/%crm_party'] = array(
    'title callback' => 'crm_party_page_title',
    'title arguments' => array(1),
    'page callback' => 'crm_party_page_view',
    'page arguments' => array(1),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('view contacts'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['party/%crm_party/view'] = array(
    'title' => t('View'),
    'page callback' => 'crm_party_page_view',
    'page arguments' => array(1),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('view contacts'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Build the party view second-level tabs.
  // @todo: Consider whether to put edit below this and these at first level.
  // @todo: Write a contrib module to turn a set of tabs into ajax tabs,
  // probably using or as part of quicktabs module.
  $pieces = module_invoke_all('crm_party_party_pieces');
  foreach ($pieces as $path => $piece) {
    // Add in some defaults for convenience.
    // @todo: once these stabilize, document them in the API file.
    $piece += array(
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('view contacts'),
    );
    $items["party/%crm_party/view/$path"] = $piece;
  }

  $items['party/%crm_party/edit'] = array(
    'title' => t('Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_party_edit_form', 1),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('edit contacts'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['party/add'] = array(
    'title' => 'Add Party',
    'page callback' => 'crm_party_add',
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('create contacts'),
  );
  $items['party/add/individual'] = array(
    'title'=> 'Add Individual',
    'page callback' => 'crm_party_add',
    'page arguments' => array('individual'),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('create contacts'),
  );
  $items['party/add/organisation'] = array(
    'title' => 'Add Organisation',
    'page callback' => 'crm_party_add',
    'page arguments' => array('organisation'),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('create contacts'),
  );
  
  return $items;
}

/**
 * Implements hook_crm_party_party_pieces().
 */
function crm_party_crm_party_party_pieces() {
  $pieces = array(
    'party' => array(
      'title' => 'Party',
      'page callback' => 'crm_party_page_view',
      'page arguments' => array(1),
      'file' => 'crm_party.pages.inc',
      'access arguments' => array('view contacts'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
  );

  // Custom pieces can be created as Views plugins.
  if (module_exists('views')) {
    // Get all views displays that implement our hook.
    // There's no need to cache: views_menu() doesn't cache for page displays.
    $views = views_get_all_views();
    foreach ($views as $view) {
      // Disabled views get nothing.
      if (!empty($view->disabled)) {
        continue;
      }

      $view->init_display();
      foreach ($view->display as $display_id => $display) {
        if (isset($display->handler) && !empty($display->handler->definition['uses hook crm_party_party_pieces'])) {
          $result = $display->handler->execute_hook_crm_party_party_pieces();
          if (is_array($result)) {
            $pieces = array_merge($pieces, $result);
          }
        }
      }
    }
  }

  return $pieces;
}

/**
 * Implements hook_permission().
 */
function crm_party_permission() {
    return array(
    'administer party types' => array(
      'title' => t('Administer Party Types'),
      'restrict access' => TRUE,
    ),
    'administer parties' =>  array(
      'title' => t('Administer Parties'),
      'restrict access' => TRUE,
    ),
    'create parties' => array(
      'title' => t('Create Parties'),
    ),
    'view parties' => array(
      'title' => t('View Parties'),
    ),
    'edit parties' => array(
      'title' => t('Edit Parties'),
    )
  );
}

/**
 * URI callback for contacts.
 */
function crm_party_uri($party) {
  return array('path' => 'party/' . $party->pid, );
}

/**
 * Implements hook_theme().
 */
function crm_party_theme() {
  return array(
    'crm_party_email' => array(
      'variables' => array('crm_party_email', 'crm_party' => NULL),
      'template' => 'crm_party_email',
    ),
  );
}

/**
 * Load a single contact.
 */
function crm_party_load($pid = NULL, $reset = FALSE) {
  $pids = (isset ($pid) ? array($pid) : array());
  $party = crm_party_load_multiple($pids, $reset);
  return $party ? reset ($party) : FALSE;
}

/**
 * Load many contacts.
 */ 
function crm_party_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_party', $pids, $conditions, $reset);
}

/**
 * pages - to be moved to a different file
 */
/**
 * Mock up the CRM Party admin interface - this is horrible: do it a better way.
 */
function crm_party_info() {
  // @todo: load bundles from entity info.
  // @todo: probably some of this admin UI can be done by EntityAPI.
  $types = array(
    'individual' => array(
      'label' => t('Individual Party'),
      'description' => 'Parties representing individual people',
      'admin' => array(
        'path' => 'admin/community/party/manage/individual',
        'access arguments' => array('administer parties'),
      ),
    ),
    'organisation' => array(
      'label' => t('Organisation Party'),
      'description' => 'Parties representing organisations or groups of people',
      'admin' => array(
        'path' => 'admin/community/party/manage/organisation',
        'access arguments' => array('administer parties'),
      ),
    ),
  );
  
  $rows = array();
  
  foreach($types as $type => $info) {
    $rows[] = array(
      $info['label'] . " <small>(Machine name: ".$type.")</small><div class=\"description\">".$info['description']."</div>",
      array(
        'data' => l(t('edit'), 'admin/community/party/manage/'.$type),
      ),
      array(
        'data' => l(t('Manage Fields'), 'admin/community/party/manage/'.$type.'/fields'),
      ),
      array(
        'data' => l(t('Manage Fields'), 'admin/community/party/manage/'.$type.'/display'),
      ),
      array(
        'data' => '', //for when we implement custom party types
      ),
    );
  }
  
  
  return array(
    'party_table' => array(
      '#theme' => 'table',
      '#header' => array(
        t('Party Type'), array('data' => t('Operations'), 'colspan' => '4'),
      ),
      '#rows' => $rows,
    ),
  );
}

/**
 * The management page for each party type.
 */
function crm_party_manage($type) {
  return "Welcome to the party type administration page for " . $type;
}

/**
 * Delete a party.
 */
function crm_party_delete(CRMParty $party) {
  $party->delete();
}

/**
 * Save a crm_party.
 *
 *  @param $info
 *
 */
function crm_party_save(&$party) {
  return entity_get_controller('crm_party')->save($party);
}

/**
 * Create a crm_party array ready for saving to the database.
 *
 *  @param $info
 *    An array carrying all the important information.
 */
function crm_party_create($info) {
  if (!is_array($info)) {
    return FALSE;
  }
  if (!isset($info['type'])) {
    return FALSE;
  }
  if (!isset($info['label'])) {
    return FALSE;
  }
  
  return (object) $info;  
}

/**
 * Implements hook_party_operations.
 */
function crm_party_party_operations() {
  $operations = array(
    'merge' => array(
      'label' => t('Merge parties'),
      'callback' => 'crm_party_party_operations_merge',
    ),
  );
  return $operations;
}

/**
 * Merge multiple users.
 */
function crm_party_party_operations_merge($parties) {
  // @todo: write me!
}

/**
 * Implements hook_views_api().
 */
function crm_party_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'crm_party') . '/includes',
  );
}
