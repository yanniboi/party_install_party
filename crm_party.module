<?php

/**
 * @file
 * Provides a generic CRM party entity.
 */

include_once("includes/crm_party.entity.inc");
include_once("includes/crm_party_type.entity.inc");

/**
 * Implements hook_entity_info().
 *
 * Define 2 entities here - the actual entity that will hold our domain 
 * specific information and an entity that holds information about the 
 * different types of entities.
 */
function crm_party_entity_info() {
  $party_info['crm_party'] = array(
    'label' => t('Party'),
    'entity class' => 'CRMParty',
    'controller class' => 'CRMPartyController',
    'base table' => 'crm_party',
    //'uri callback' => 'crm_party_uri',
    'fieldable' => TRUE,
    'module' => 'crm_party',
    'entity keys' => array(
      'id' => 'pid',
      'bundle' => 'type',
    ),
    'exportable' => TRUE,
    //'static cache' => TRUE,
    'bundles' => array(
      'individual' => array(
        'label' => t('Individual Party'),
        'admin' => array(
          'path' => 'admin/community/party/manage/individual',
          'access arguments' => array('administer parties'),
        ),
      ),
      'organisation' => array(
        'label' => t('Organisation Party'),
        'admin' => array(
          'path' => 'admin/community/party/manage/organisation',
          'access arguments' => array('administer parties'),
        ),
      ),
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Contact'),
        'custom settings' =>  FALSE,
      ),
    )
  );
  
  return $party_info;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the model types via a hook to avoid a recursion
 * issue as loading the model types requires the entity info as well.
 *
 * @todo This needs to be improved
 *
function crm_party_entity_info_alter(&$entity_info) {
  foreach (crm_party_get_types() as $type => $info) {
    $entity_info['crm_party']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/community/structure/party_types/manage/%crm_party_type',
        'real path' => 'admin/community/structure/party_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer party types'),
      ),
    );
  }
}
*/

/**
 * Implements hook_menu().
 */
function crm_party_menu() {
  $items['admin/community'] = array(
    'title' => 'Community',
    'description' => 'Manage the community',
    'page callback' => 'crm_party_admin',
    'page arguments' => array('list'),
    'access arguments' => array('administer parties'),
    'position' => 'left',
    'file' => 'crm_party.admin.inc',  
  );
  $items['admin/community/party/manage'] = array(
    'title' => 'Party Admin',
    'description' => 'Manage Contact Information',
    'page callback' => 'crm_party_info',
    'access arguments' => array('administer parties'),
  );
  $items['admin/community/party/manage/individual'] = array(
    'title' => 'Manage Individuals',
    'description' => 'Manage Contact Information',
    'page callback' => 'crm_party_manage',
    'page arguments' => array('individual'),
    'access arguments' => array('administer parties'),
  );
  $items['admin/community/party/manage/organisation'] = array(
    'title' => 'Manage Organisations',
    'description' => 'Manage Contact Information',
    'page callback' => 'crm_party_manage',
    'page arguments' => array('organisation'),
    'access arguments' => array('administer parties'),
  );

  $items['party/%crm_party'] = array(
    'title callback' => 'crm_party_page_title',
    'title arguments' => array(1),
    'page callback' => 'crm_party_page_view',
    'page arguments' => array(1),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('view contacts'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['party/%crm_party/view'] = array(
    'title' => t('View'),
    'page callback' => 'crm_party_page_view',
    'page arguments' => array(1),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('view contacts'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  // Build the party view second-level tabs.
  // @todo: Consider whether to put edit below this and these at first level.
  // @todo: Write a contrib module to turn a set of tabs into ajax tabs,
  // probably using or as part of quicktabs module.
  $pieces = module_invoke_all('crm_party_party_pieces');
  foreach ($pieces as $path => $piece) {
    // Add in some defaults for convenience.
    // @todo: once these stabilize, document them in the API file.
    $piece += array(
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('view contacts'),
    );
    $items["party/%crm_party/view/$path"] = $piece;
  }

  $items['party/%crm_party/edit'] = array(
    'title' => t('Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_party_edit_form', 1),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('edit contacts'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['party/add'] = array(
    'title' => 'Add Party',
    'page callback' => 'crm_party_add',
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('create contacts'),
  );
  $items['party/add/individual'] = array(
    'title'=> 'Add Individual',
    'page callback' => 'crm_party_add',
    'page arguments' => array('individual'),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('create contacts'),
  );
  $items['party/add/organisation'] = array(
    'title' => 'Add Organisation',
    'page callback' => 'crm_party_add',
    'page arguments' => array('organisation'),
    'file' => 'crm_party.pages.inc',
    'access arguments' => array('create contacts'),
  );
  
  return $items;
}

/**
 * Get all data sets
 *
 * @todo: Can we cache this? Especially to avoid adding database tables
 */
function crm_party_data_set_info() {
  $sets = module_invoke_all('party_data_set_info');  
  
  //this should probably go somewhere else but I can't think where
  foreach($sets as $type => $set) {
    if(!db_table_exists('crm_party_data_set_'.$type)) {
      crm_party_data_set_type_add($set_type);
    }
  }
  
  return $sets;  
}

/**
 * Add a new data set type to the system
 *
 * This adds a table to the database to handle parties relationships to data sets
 * 
 * @param $set_type the machine name of the type
 * 
 * @todo Make this use a hook to load the schema
 */
function crm_party_data_set_type_add($set_type) {
  module_load_install('crm_party');
  
  $schema = crm_party_party_data_set_schema();
  db_create_table('crm_party_data_set_'.$set_type);
}

/** 
 * Load a data set
 *
 * @param $party The party object of the party we're concerned with
 * @param $set_type The set type as defined in hook_data_set_info
 * @param $set_id The set id as stored in the related table
 *
 * @return 
 *   An object or array representing the data set.
 */
function crm_party_data_set_load($party, $set_type, $set_id) {
  $sets = crm_party_data_set_info();
  $function = $sets[$set_type]['load callback'];
  if(function_exists($function)) {
    $result = call_user_func($function, $party, $set_type, $set_id);
  }
  else {
    return false;
  }  
  return $result; 
}

/** 
 * Get the form for a data set (more to the point get a set of fields for the data set
 * might need to work on this).
 *
 * @param $party The party object of the party we're concerned with
 * @param $set_type The set type as defined in hook_data_set_info
 * @param $set_id The set id as stored in the related table
 *
 * @return 
 *   A form array. 
 */
function crm_party_data_set_form($party, $set_type, $set_id = FALSE) {
  $sets = crm_party_data_set_info();
  $function = $sets[$set_type]['form callback'];
  if(function_exists($function)) {
    $result = call_user_func($function, $party, $set_type, $set_id);
  }
  else {
    return false;
  }  
  return $result; 
}

/**
 * Attach a data set to a party (or edit the attachment?)
 *
 * @param $party the party object
 * @param $set_type The set type as defined in hook_data_set_info
 * @param $set_id The set id as stored in the related table
 * @param $main Is this the main set of this type
 * @param $hat Not used yet
 * @param $hat_main Not used yet
 */
function crm_party_data_set_attach($party, $set_type, $set_id, $main = false, $hat = '', $hat_main = false, $null = false) {
  $data = array(
    'pid' => $party->pid,
    'sid' => $set_id,
    'main' => $main,
    'hat' => $hat,
    'hat_main' => $hat_main,
    'null' => $null,
  );
  
  drupal_write_record('crm_party_data_set_'.$set_type, $data);
}

/**
 * Unattach a data set from a party
 *
 * @param $party the party object
 * @param $set_type The set type as defined in hook_data_set_info
 * @param $set_id The set id as stored in the related table
 *
 * @todo Implement
 */
function crm_party_data_set_detach($party, $set_type, $set_id){
  return true;
} 


/**
 * Get all party piece definitions
 *
 * @todo: Can we cache this?
 */
function crm_party_party_piece_info() {
  $pieces = module_invoke_all('party_party_piece_info');
  return $pieces;
}

/**
 * Get party piece instances
 *
 * @param $parent Id of the parent party piece
 * @param $party_type The party type we're looking at
 * @param $party_piece (optional) the Piece we're looking for
 */
function crm_party_get_party_piece_instances($parent, $party_type, $party_pieces = null) {
  // Build the query;
  $query = db_select('crm_party_party_pieces','pp');
  $query->fields('pp');
  $query->condition('parent_id', $parent, '=');
  if(is_array($party_pieces) {
    $query->condition('party_piece', $party_pieces, 'IN');
  }
  $query->condition('party_type', $party_type, '=');
  $query->orderBy('weight');
  
  // Get all the results that fit
  $results = $query->execute()->fetchAllAssoc('instance_id');
  foreach($results as $key => $result) {
    // Decode the arguments into a useable form.
    $results[$key]['arguments'] = json_decode($result['arguments'], true);
  }
  return $results;
}

/**
 * Display a party piece
 *
 * @param $party the party object we're looking at
 * @param $instance the instance of a party piece either an id or associative array
 *   (one row from crm_party_get_party_pieces);
 *
 * @todo workout something to do with permissions
 * @todo 
 */
function crm_party_party_piece_display($party, $instance) {
  if(is_numeric($instance)) {
    // Build the query;
    $query = db_select('crm_party_party_pieces','pp');
    $query->fields('pp');
    $query->condition('instance_id', $instance, '=');
    // Get the row
    $result = $query->execute()->fetchAssoc();
    $result['arguments'] = json_decode($result['arguments'], true);
    $instance = $result;
  }
  
  //Call the display function
  $pieces = crm_party_party_piece_info();
  $function = $pieces[$instance['party_piece']]['display callback'];
  
  if(function_exists($function)) {
    $result = call_user_func($function, $party, $instance, $instance['title'], $instance['arguments']);
  }
  else {
    return false;
  }

  //If the Party Piece can have children, load those children
  if($pieces[$instance['party_piece']]['nesting']) {
    $result += crm_party_party_piece_display_children($party, $instance);
  }
  
  return $result;   
}

/**
 * display the children party pieces
 *
 * @param $party The party we're looking at.
 * @param $instance The instance of the parent.
 *
 * @return
 *    An array of renderable arrays keyed by "child_piece_<child_instance_id>"
 *
 * @todo Implement. Use crm_party_get_party_pieces. And crm_party_piece_display.
 */
function crm_party_party_piece_display_children($party, $instance) {
  return array();
}

/**
 * Implements hook_party_part_piece_info().
 */
function crm_party_party_party_piece_info() {
  $pieces = array();
  //Define tabs
  $pieces['tab'] = array(
    'label' => 'Party Tab',
    'display callback' => 'crm_party_party_piece_tab_display',
    'nesting' => true,
  );
  return $pieces;
}

/**
 * Display a tab
 *
 * @todo Implement. Use crm_party_party_piece_display_children() to get hte children of the tab.
 */
function crm_party_party_piece_tab_display($party, $instance, $instance['title'], $instance['arguments']) {
  return array();
}

/**
 * Implements hook_crm_party_party_pieces().
 * rlmumford: DEPRECATED? http://drupal.org/node/1302682
 */
function crm_party_crm_party_party_pieces() {
  $pieces = array(
    'party' => array(
      'title' => 'Party',
      'page callback' => 'crm_party_page_view',
      'page arguments' => array(1),
      'file' => 'crm_party.pages.inc',
      'access arguments' => array('view contacts'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
  );

  // Custom pieces can be created as Views plugins.
  if (module_exists('views')) {
    // Get all views displays that implement our hook.
    // There's no need to cache: views_menu() doesn't cache for page displays.
    $views = views_get_all_views();
    foreach ($views as $view) {
      // Disabled views get nothing.
      if (!empty($view->disabled)) {
        continue;
      }

      $view->init_display();
      foreach ($view->display as $display_id => $display) {
        if (isset($display->handler) && !empty($display->handler->definition['uses hook crm_party_party_pieces'])) {
          $result = $display->handler->execute_hook_crm_party_party_pieces();
          if (is_array($result)) {
            $pieces = array_merge($pieces, $result);
          }
        }
      }
    }
  }

  return $pieces;
}

/**
 * Implements hook_permission().
 */
function crm_party_permission() {
    return array(
    'administer party types' => array(
      'title' => t('Administer Party Types'),
      'restrict access' => TRUE,
    ),
    'administer parties' =>  array(
      'title' => t('Administer Parties'),
      'restrict access' => TRUE,
    ),
    'create parties' => array(
      'title' => t('Create Parties'),
    ),
    'view parties' => array(
      'title' => t('View Parties'),
    ),
    'edit parties' => array(
      'title' => t('Edit Parties'),
    )
  );
}

/**
 * URI callback for contacts.
 */
function crm_party_uri($party) {
  return array('path' => 'party/' . $party->pid, );
}

/**
 * Implements hook_theme().
 */
function crm_party_theme() {
  return array(
    'crm_party_email' => array(
      'variables' => array('crm_party_email', 'crm_party' => NULL),
      'template' => 'crm_party_email',
    ),
  );
}

/**
 * Load a single contact.
 */
function crm_party_load($pid = NULL, $reset = FALSE) {
  $pids = (isset ($pid) ? array($pid) : array());
  $party = crm_party_load_multiple($pids, $reset);
  return $party ? reset ($party) : FALSE;
}

/**
 * Load many contacts.
 */ 
function crm_party_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_party', $pids, $conditions, $reset);
}

/**
 * pages - to be moved to a different file
 */
/**
 * Mock up the CRM Party admin interface - this is horrible: do it a better way.
 */
function crm_party_info() {
  // @todo: load bundles from entity info.
  // @todo: probably some of this admin UI can be done by EntityAPI.
  $types = array(
    'individual' => array(
      'label' => t('Individual Party'),
      'description' => 'Parties representing individual people',
      'admin' => array(
        'path' => 'admin/community/party/manage/individual',
        'access arguments' => array('administer parties'),
      ),
    ),
    'organisation' => array(
      'label' => t('Organisation Party'),
      'description' => 'Parties representing organisations or groups of people',
      'admin' => array(
        'path' => 'admin/community/party/manage/organisation',
        'access arguments' => array('administer parties'),
      ),
    ),
  );
  
  $rows = array();
  
  foreach($types as $type => $info) {
    $rows[] = array(
      $info['label'] . " <small>(Machine name: ".$type.")</small><div class=\"description\">".$info['description']."</div>",
      array(
        'data' => l(t('edit'), 'admin/community/party/manage/'.$type),
      ),
      array(
        'data' => l(t('Manage Fields'), 'admin/community/party/manage/'.$type.'/fields'),
      ),
      array(
        'data' => l(t('Manage Fields'), 'admin/community/party/manage/'.$type.'/display'),
      ),
      array(
        'data' => '', //for when we implement custom party types
      ),
    );
  }
  
  
  return array(
    'party_table' => array(
      '#theme' => 'table',
      '#header' => array(
        t('Party Type'), array('data' => t('Operations'), 'colspan' => '4'),
      ),
      '#rows' => $rows,
    ),
  );
}

/**
 * The management page for each party type.
 */
function crm_party_manage($type) {
  return "Welcome to the party type administration page for " . $type;
}

/**
 * Delete a party.
 */
function crm_party_delete(CRMParty $party) {
  $party->delete();
}

/**
 * Save a crm_party.
 *
 *  @param $info
 *
 */
function crm_party_save(&$party) {
  return entity_get_controller('crm_party')->save($party);
}

/**
 * Create a crm_party array ready for saving to the database.
 *
 *  @param $info
 *    An array carrying all the important information.
 */
function crm_party_create($info) {
  if (!is_array($info)) {
    return FALSE;
  }
  if (!isset($info['type'])) {
    return FALSE;
  }
  if (!isset($info['label'])) {
    return FALSE;
  }
  
  return (object) $info;  
}

/**
 * Implements hook_party_operations.
 */
function crm_party_party_operations() {
  $operations = array(
    'merge' => array(
      'label' => t('Merge parties'),
      'callback' => 'crm_party_party_operations_merge',
    ),
  );
  return $operations;
}

/**
 * Merge multiple users.
 */
function crm_party_party_operations_merge($parties) {
  // @todo: write me!
}

/**
 * Implements hook_views_api().
 */
function crm_party_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'crm_party') . '/includes',
  );
}
