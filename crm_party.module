<?php
/**
 * @file party.module
 *
 * A party is a collection of profile2 objects.
 * What this means in practical terms is all the data that you can store
 * about a user, but without the actual user account.
 
 builds on:
 
 - profile_multiple, possibly
 - entity_relationship to connect parties to users
 - 
 
 
 Ecosystem modules to follow:
 - party_user: connects a party to a user. (bundled in this project!)
 - something to allow several users to control a party
  (eg, for employees of an organization to all change its records)
 - genus: create hierarchical type templates.
 */

/*

todo:

- UI list of contacts
  - hook_action_links to add a contact
- UI view contact (same as tabs for user account)
- UI edit/add contact (same as tabs for user edit)
- relationship API hook to define relationships types:
  - profile <-> contact 
  - contact <-> user
- hook_user_insert to create relationships


TROUBLE WITH ENTITY
*/

/**
 * Implements hook_entity_info().
 */
function crm_party_entity_info() {
  $return = array(
    'crm_party' => array(
      'label' => t('Party'),
      'entity class' => 'CRMParty',
      'controller class' => 'CRMPartyController',
      'base table' => 'crm_party',
      'uri callback' => 'crm_party_uri',
      'fieldable' => TRUE, // for now!
      'entity keys' => array(
        'id' => 'pid',
        'uid' => 'uid',
      ),
      'bundles' => array(
        'person'=> array(
          'label' => 'Personal Contact',
          'admin' => array(
            'path' => 'admin/community/party/manage',
            'access arguments' => array('administer parties'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Party'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'crm_party_label',
      'access callback' => 'crm_party_access',
      'admin ui' => array(
        'path' => 'admin/content/party',
        'controller class' => 'CRMPartyUIController',
      ),
    ),
  );
  return $return;
}

/**
 * Implements hook_menu().
 */
function crm_party_menu() {
  $items['admin/community/party/manage'] = array(
    'title' => 'Party Admin',
    'description' => 'Manage Party Information',
    'page callback' => 'crm_party_info',
    'access arguments' => array('administer parties'),
  );
  $items['party/%crm_party'] = array(
    'title callback' => 'crm_party_page_title',
    'title arguments' => array(1),
    'page callback' => 'crm_party_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view all parties'),
    'type' => MENU_CALLBACK,
  );
  $items['party/%crm_party/edit'] = array(
    'title callback' => 'crm_party_edit_page_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_party_edit_form', 1),
    'access arguments' => array('edit all parties'),
    'type' => MENU_CALLBACK,
  );
  $items['party/add'] = array(
    'title' => 'Add Party',
    'page callback' => 'crm_party_add',
    'access arguments' => array('create parties'),
  );
  $items['admin/community/partyold'] = array(
    'title' => 'Parties',
    'page callback' => 'party_profiles',
    'access arguments' => array('view all parties'),
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function crm_party_permission() {
  return array(
    'administer parties' => array(
      'title' => t('Administer parties'),
    ),
    'view all parties' => array(
      'title' => t('View all parties'),
    ),
    'edit all parties' => array(
      'title' => t('Edit all parties'),
    ),
    'create parties' => array(
      'title' => t('Create Parties'),
    ),
    

  );
}

/**
 * URI callback for contacts.
 *
 * @param $party
 *  A party object
 */
function crm_party_uri($party) {
  return array('path' => 'party/'.$party->pid , );
}

/**
 * Label callback for parties. Show either the username or a profile field as the label.
 *
 * @param $party
 *  A part object
 */
function crm_party_label($party) {
  dsm($party);
  if (is_null($party->uid)) {
    $label = "Anonymous";
  }
  else {
    $label = $party->user_name;
  }
  return $label;
}

/**
 * Access callback for parties.
 */
function crm_party_access($op, $party = NULL, $user = NULL) {
  // TODO!!!
  return TRUE;
}

// TODO: pages - to be moved to a different file
/**
 * Page callback for admin page.
 */ 
function crm_party_info() {
  return "Welcome to the contact info administration page";
}

/**
 * Title callback fro a party page.
 */ 
function crm_party_page_title($party) {
  return $party->pid;
}

/**
 * View page callback for a party.
 */
function crm_party_page_view($party, $view_mode = 'full') {
  $party->content = array();
  
  $controller = entity_get_controller('crm_party');  
  $content = $controller->view(array($party->pid => $party));
  drupal_set_title($party->pid);
  return $content;  
  
}

/**
 * Title callback for an edit party page.
 */ 
function crm_party_edit_page_title($party) {
  return "Edit Party" . $party->pid;
} 

/**
 * Page callback for adding a party.
 */
function crm_party_add() {
  $party = (object) array(
    'type' => 'person',
    'pid' => NULL,
  );
    
  return drupal_get_form('crm_party_edit_form', $party);
}

/**
 * Form builder for the party edit form.
 */
function crm_party_edit_form($form, &$form_state, $party) {
  if (isset($party->pid)) {
    $form['pid'] = array(
      '#type' => 'value',
      '#value' => $party->pid,
    );
  }
  
  field_attach_form('crm_party', $party, $form, $form_state);
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 99,
  );

  return $form;
}

function crm_party_edit_form_validate($form, &$form_state) {
  $submission = (object) $form_state['values'];
  field_attach_form_validate('crm_party', $submission, $form, $form_state);  
}

function crm_party_edit_form_submit($form, &$form_state) {
  $party = entity_ui_controller('crm_party')->entityFormSubmitBuildEntity($form, $form_state);
  //$party->save();
  
  //$form_state['redirect'] = 'party/' . $party->pid;
}

/**
 * Load a party. Wrapper around entity_load() for convenience.
 *
 * @param $party
 *  Either an array or object.
 */
function crm_party_load($id = FALSE, $conditions = array(), $reset = FALSE) {
  dsm($id);
  $parties = entity_load('party', array($id), $conditions, $reset);
  dsm($parties);
  return $parties;
}


/**
 * Save a party. Adds defaults to new party objects.
 *
 * @param $party
 *  A CRMParty Object
 */
function crm_party_save(CRMParty $party) {
  if (is_array($party)) {
    $party = (object)$party;
  }
  
  // Set defaults.
  if (!isset($party->uid)) {
    $party->uid = NULL;
  } 
  
  return $party->save();
}

/**
 * Form callback. - Should be Depreciated
 */
function crm_party_form($form, &$form_state, $party) {
  dsm($party);

  $form = array();
  
  $form['test'] = array(
    '#markup' => 'Party form',
  );
 
  $form['weight'] = array('#type' => 'weight', '#delta' => 10, '#default_value' => 0);  
  $form['fooedit'] = array(
    '#value' => l(t('edit vocabulary'), "admin/content/taxonomy/edit/vocabulary/vid")
  );  
  
  $form['yy'] = array('#type' => 'link', '#title' => t('link title'), '#href' => 'path/to/location');  
  $form['xx'] = array('data' => array('#type' => 'link', '#title' => t('link title'), '#href' => 'path/to/location'));  
  
  return $form;
  
}

// ========================== party - user interaction

/**
 * Implementation of hook_user_cancel().
 */
function crm_party_user_cancel($edit, $account, $method) {

}


/**
 * Implementation of hook_user_insert().
 */
function crm_party_user_insert(&$edit, $account, $category) {

}

/**
 * Menu callback: shows an admin list of profile sets.
 */
function crm_party_profiles() {
  $categories = _user_categories();
  dsm($categories);
  
  return 'yay';
}

// ========================== controller classes
/**
 * The class for A party entity
 */
class CRMParty extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'crm_party');
  }

  protected function defaultLabel() {
    return $this->pid;
  }

  protected function defaultUri() {
    return array('path' => 'party/' . $this->pid);
  }  
}


/**
 * Default controller for providing UI.
 */
class CRMPartyUIController extends EntityDefaultUIController {
  /**
   * Overrides the default description of the top level menu item.
   * @see EntityDefaultUIController::hook_menu()
   */
  public function hook_menu() {
    $items = parent::hook_menu();

    $items[$this->path]['title'] = 'Parties';
    $items[$this->path]['description'] = 'Manage parties.';
    $items[$this->path]['type'] = MENU_LOCAL_TASK | MENU_NORMAL_ITEM;
    
    dsm($items);
    
    return $items;
  }
  
  /**
   * Generates the render array for a overview table for arbitrary entities
   * matching the given conditions.
   *
   * @param $conditions
   *   An array of conditions as needed by entity_load().

   * @return Array
   *   A renderable array.
   */
  public function XoverviewTable($conditions = array()) {
    $entities = entity_load($this->entityType);
    ksort($entities);

    $rows = array();
    foreach ($entities as $id => $entity) {
      $rows[] = $this->overviewTableRow($conditions, $id, $entity);
    }
    // Assemble the right table header.
    $header = array(t('Label'));
    if (!empty($this->entityInfo['exportable'])) {
      $header[] = t('Status');
    }
    // Add operations with the right colspan.
    $field_ui = !empty($this->entityInfo['bundle of']) && module_exists('field_ui');
    $header[] = array('data' => t('Operations'), 'colspan' => $field_ui ? 5 : 3);

    $render = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#empty' => t('None.'),
    );
    return $render;
  }
  
  /**
   * Generates the row for the passed entity and may be overridden in order to
   * customize the rows.
   *
   * @param $additional_cols
   *   Additional columns to be added after the entity label column.
   */
  protected function overviewTableRow($conditions, $id, $entity, $additional_cols = array()) {
    $entity_uri = entity_uri($this->entityType, $entity);

    $row[] = array('data' => array(
      '#theme' => 'entity_ui_overview_item',
      '#label' => entity_label($this->entityType, $entity),
      '#name' => !empty($this->entityInfo['exportable']) ? entity_id($this->entityType, $entity) : FALSE,
      '#url' => $entity_uri ? $entity_uri : FALSE,
      '#entity_type' => $this->entityType),
    );

    // Add in any passed additional cols.
    foreach ($additional_cols as $col) {
      $row[] = $col;
    }

    // Add a row for the exportable status.
    if (!empty($this->entityInfo['exportable'])) {
      $row[] = array('data' => array(
        '#theme' => 'entity_status',
        '#status' => $entity->{$this->statusKey},
      ));
    }
    // In case this is a bundle, we add links to the field ui tabs.
    $field_ui = !empty($this->entityInfo['bundle of']) && module_exists('field_ui');

    // Add operations depending on the status.
    if (entity_has_status($this->entityType, $entity, ENTITY_FIXED)) {
      $row[] = array('data' => l(t('clone'), $this->path . '/manage/' . $id . '/clone'), 'colspan' => $field_ui ? 5 : 3);
    }
    else {
      $row[] = l(t('edit'), $this->path . '/manage/' . $id);

      if ($field_ui) {
        $row[] = l(t('manage fields'), $this->path . '/manage/' . $id . '/fields');
        $row[] = l(t('manage display'), $this->path . '/manage/' . $id . '/display');
      }

      $row[] = l(t('clone'), $this->path . '/manage/' . $id . '/clone');
      if (empty($this->entityInfo['exportable']) || !entity_has_status($this->entityType, $entity, ENTITY_IN_CODE)) {
        $row[] = l(t('delete'), $this->path . '/manage/' . $id . '/delete', array('query' => drupal_get_destination()));
      }
      elseif (entity_has_status($this->entityType, $entity, ENTITY_OVERRIDDEN)) {
        $row[] = l(t('revert'), $this->path . '/manage/' . $id . '/revert', array('query' => drupal_get_destination()));
      }
      else {
        $row[] = '';
      }
    }
    return $row;
  }
}

/**
 * A controller implementing EntityAPIControllerInterface and being able to
 * deal with exportable entities.
 */
class CRMPartyController extends EntityAPIController implements EntityAPIControllerInterface {
  /**
   * Add data from users to parties.
   */
  protected function buildQuery($ids, $conditions = array(), $revision_id = FALSE) {
    $query = parent::buildQuery(array(), $conditions, $revision_id);
    
    // Add the {users} table with a left join as our uid may be NULL.
    $query->leftJoin('users', 'u', 'base.uid = u.uid');
    $query->addField('u', 'status', 'user_status');
    $query->addField('u', 'name', 'user_name');
      
    return $query;
  }

  public function load($ids = array(), $conditions = array()) {
    $entities = parent::load($ids, $conditions);
    
    dsm($entities);
    
    return $entities;
  }
}

