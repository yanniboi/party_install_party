<?php
/**
 * @file party_hat.install
 * TODO: Enter file description here.
 */
 
/**
 * Implements hook_install().
 */
function party_hat_install() {
  field_info_cache_clear();

  if (!field_info_field('party_hat')) {
    $field = array(
      'field_name' => 'party_hat',
      'type' => 'hat_reference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
      ),
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'party_hat',
      'entity_type' => 'party',
      'bundle' => 'individual',
      'label' => t('Hats'),
      'required' => FALSE,
      'description' => t("This party's hats"),
      'widget' => array(
        'type' => 'options_buttons',
        'settings' => array(),
      ),
      'display' => array(
        'default' => array(
          'type' => 'hat_reference_default',
          'label' => 'inline',
        ),
      ),
    );
    field_create_instance($instance);
    
    $instance = array(
      'field_name' => 'party_hat',
      'entity_type' => 'party',
      'bundle' => 'organisation',
      'label' => t('Hats'),
      'required' => FALSE,
      'description' => t("This party's hats"),
      'widget' => array(
        'type' => 'options_buttons',
        'settings' => array(),
      ),
      'display' => array(
        'default' => array(
          'type' => 'hat_reference_default',
          'label' => 'inline',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_schema().
 */
function party_hat_schema() {
  $schema['party_hat'] = array(
    'description' => 'Stores hat definitions',
    'fields' => array(
      'hid' => array(
        'description' => 'Primary key for the hat.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine readable name of the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'A human readable name for the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Serialized data containing the field properties that do not warrant a dedicated column.',
      ),
      'required' => array(
        'description' => 'This Hat is required',
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ) + entity_exportable_schema_fields(),
    ),
    'primary key' => array('hid'),
  );
  
  // @todo do we need the phid column?
  //       We need a primary key and neither of the two fields would be unique
  //       We don't need this table at all anymore
  $schema['party_hattings'] = array(
    'description' => 'Stores hattings (relationships between hats and parties)',
    'fields' => array(
      'phid' => array(
        'description' => 'Primary key for the hatting.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'hat' => array(
        'description' => 'The machine readable name of the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'party' => array(
        'description' => 'The Party Id',
        'type' => 'int',
        'not null' => TRUE
      ),
    ),
    'primary key' => array('phid'),
  );
  
  // Store data set settings for hats
  $schema['party_hat_data_set_rules'] = array(
    'description' => 'Store data set settings for hats',
    'fields' => array(
      'phdsid' => array(
        'description' => 'Primary key for the setting.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'hat' => array(
        'description' => 'The machine readable name of the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'data_set' => array(
        'description' => 'The machine readable name of the data_Set',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'has' => array(
        'description' => 'Does the Party Have this data set',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE
      ),
      'multiple' => array(
        'description' => 'Does the Party Have multiple of this data set',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE
      ),
    ),
    'primary key' => array('phdsid'),
  );

  return $schema;
}

/**
 * Implements hook_field_schema()
 */
function party_hat_field_schema() {
  $columns = array(
    'hat_name' => array(
      'description' => 'The machine readable name of the hat',
      'type' => 'varchar',
      'length' => '255',
      'not null' => TRUE,
      'default' => '',
    ),
  );
  $indexes = array();
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
  );
}

/**
 * Change data set rules: Drop the rule column and add 'has' and 'multiple'
 */
function party_hat_update_7001() {
  db_drop_field('party_hat_data_set_rules', 'rule');
  db_add_field('party_hat_data_set_rules', 'has', array(
    'description' => 'Does the Party Have this data set',
    'type' => 'int',
    'default' => 0,
    'not null' => TRUE,
  ));
  db_add_field('party_hat_data_set_rules', 'multiple', array(
    'description' => 'Does the Party Have multiple of this data set',
    'type' => 'int',
    'default' => 0,
    'not null' => TRUE,
  ));
}

/**
 * Add This field to a Party.
 */
function party_hat_update_7002() {
  $field = array(
    'field_name' => 'party_hat',
    'type' => 'hat_reference',
    'settings' => array(
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'party_hat',
    'entity_type' => 'party',
    'bundle' => 'individual',
    'label' => 'Hats',
    'required' => TRUE,
    'description' => 'This Parties\' Hats',
    'widget' => array(
      'type' => 'options_buttons',
      'settings' => array(),
    ),
    'display' => array(
      'default' => array(
        'type' => 'hat_reference_default',
        'label' => 'inline',
      ),
    ),
  );
  field_create_instance($instance);        
}

/**
 * Add the data column to the hat table.
 */
function party_hat_update_7003() {
  $field_spec = array(
    'type' => 'blob',
    'size' => 'big',
    'not null' => TRUE,
    'initial' => serialize(array()),
    'serialize' => TRUE,
    'description' => 'Serialized data containing the field properties that do not warrant a dedicated column.',
  );
  db_add_field('party_hats', 'data', $field_spec);
}

/**
 * Renamed the hat table to singular.
 */
function party_hat_update_7004() {
  db_rename_table('party_hats', 'party_hat');
}

/**
 * Add the hat field to organisations
 */
function party_hat_update_7005() {
  $instance = array(
    'field_name' => 'party_hat',
    'entity_type' => 'party',
    'bundle' => 'organisaton',
    'label' => t('Hats'),
    'required' => TRUE,
    'description' => t("This party's hats"),
    'widget' => array(
      'type' => 'options_buttons',
      'settings' => array(),
    ),
    'display' => array(
      'default' => array(
        'type' => 'hat_reference_default',
        'label' => 'inline',
      ),
    ),
  );
  field_create_instance($instance);
}

