<?php

/**
 * @file
 * Support for linking users to parties
 */

/**
 * Implements hook_party_data_set_info()
 */
function party_user_party_data_set_info() {
  $sets['user'] = array(
    'label' => t("User account"),
    'entity type' => 'user',
    'class' => 'UserPartyController',
    'singleton' => TRUE,
    'max cardinality' => 1,
    'view mode' => 'full',
    'admin' => array(
      'edit' => 'admin/config/people/accounts',
      'manage fields' => 'admin/config/people/accounts/fields',
      'manage display' => 'admin/config/people/accounts/display',
    ),
    'form callback' => "party_user_form_user",
  );
  return $sets;
}

/**
 * Implements hook_party_party_pieces().
 */
function party_user_party_party_pieces() {
  return array(
    'user' => array(
      'title' => 'User',
      'page callback' => 'party_view_data_set',
      'page arguments' => array(1, 'user'),
      'file' => 'party.pages.inc', 
      'access callback' => TRUE,
      'access arguments' => array(1),
      'weight' => -8,
    ),
  );
}

/**
 * Menu access callback for the party user piece.
 */
function party_user_party_view_user_access($party) {
  // @todo:
  // - check user_access() for viewing user accounts
  // - check there actually is a user account to show
  // @todo:
  // nice touch, maybe: if there is no user account to show, instead offer a 
  // form to connect one?
  return TRUE;
}

/**
 * Page callback for user party piece.
 */
function party_user_party_view_user($party) {
  // @todo: display the user here.
  return 'The user is shown here.';
}

/**
 * Build the User Data Set form.
 */
function party_user_form_user($form, &$form_state, &$attached_entity, $party) {
  $user_form = array();
  
  // If the user is set we load the edit account form.
  if ($attached_entity->eid !== NULL) {
    module_load_include('inc', 'user', 'user.pages');
    $user_form['op'] = array(
      '#type' => 'value',
      '#value' => 'edit',
    );
    
    $user_form = user_profile_form($user_form, $form_state, $attached_entity->entity);
    unset($user_form['actions']);
  }
  else {
    // Mark down that we're selecting which user to connect.
    $user_form['op'] = array(
      '#type' => 'value',
      '#value' => 'select',
    );
  
    // Store the account uid so we can check if it changes on submit.
    $user_form['party_user_uid'] = array(
      '#type' => 'value',
      '#value' => isset($attached_entity->entity->uid) ? $attached_entity->entity->uid : NULL,
    );

    $user_form['user'] = array(
      '#type' => 'textfield',
      '#title' => t('User'),
      '#maxlength' => 60,
      '#autocomplete_path' => 'user/autocomplete',
      '#default_value' => isset($attached_entity->entity->name) ? $attached_entity->entity->name : '',
      '#weight' => -1,
      '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
    );
  }
  
  return $user_form;
}

/**
 * Validate the user data set form
 *
 * @todo: Implement
 */
function party_user_form_user_validate($form, &$form_state, &$attached_entity, $party) {
  return TRUE;
}

/**
 * Submit the user data set form
 */
function party_user_form_user_submit($form, &$form_state, &$attached_entity, $party) {
  $hash = $attached_entity->hash();
  
  $op = $form_state['values'][$hash]['op'];
    
  if ($op == 'select') {
    // Attempt to load a user from the given input.
    $account = user_load_by_name($form_state['values'][$hash]['user']);
    $attached_entity->setAttachedEntity($account);
  }
  else if ($op == 'edit') {
    $account = $attached_entity->entity;
    $account_unchanged = clone $account;
    $category = $form[$hash]['#user_category'];
    
    // This code is taken out of entity_form_submit_build_entity
    // Flatten the $form_state values for the user.
    $account_values = array();
    $account_values += isset($form_state['values'][$hash]['account']) ? $form_state['values'][$hash]['account'] : array();
    $account_values += isset($form_state['values'][$hash]['signature_settings']) ? $form_state['values'][$hash]['signature_settings'] : array();
    $account_values += isset($form_state['values'][$hash]['picture']) ? $form_state['values'][$hash]['picture'] : array();
    
    $values_excluding_fields = array_diff_key($account_values, field_info_instances('user', 'user'));
    foreach ($values_excluding_fields as $key => $value) {
      $account->$key = $value;
    }
        
    field_attach_submit('user', $account, $form[$hash], $form_state);
    
    $edit = array_intersect_key((array) $account, $account_values);
    user_save($account_unchanged, $edit, $category);
    
    if ($category == 'account' && !empty($edit['pass'])) {
      // Remove the password reset tag since a new password was saved.
      unset($_SESSION['pass_reset_' . $account->uid]);
    }
    cache_clear_all();
  }
}

/**
 * Implements hook_form_FORM_ID_alter.
 * 
 * Create a Party when Users Register
 */
function party_user_form_user_register_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'party_user_register_submit';
}

function party_user_register_submit($form, &$form_state) {
  $info = array(
    'type' => 'individual',
    'label' => $form_state['user']->name,
  );
  $party = party_create($info);
  $party->save();
  
  $data_set_name = party_get_entity_data_set('user', $form_state['user']);
  party_attach_entity($party, $form_state['user'], $data_set_name);
}

/**
 * Controller class for CRM integration.
 *
 * @todo: move this to an inc file for autoloading.
 */
class UserPartyController extends EntityDefaultPartyController {
  /**
   * Display a user dataSet
   *  This is needed because user doesn't use the entity API
   */
  public function display($mode) {
    return user_view($this->entity, $mode);
  }
  
  /**
   * Get the entity label
   */
  public function getLabel() {
    return format_username($this->entity);
  }
}

