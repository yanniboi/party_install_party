<?php

/**
 * @file
 * Support for linking users to parties
 */

/**
 * Implements hook_party_data_set_info()
 */
function party_user_party_data_set_info() {
  $sets['user'] = array(
    'label' => t("User account"),
    'entity type' => 'user',
    'class' => 'UserPartyController',
    'singleton' => TRUE,
    'max cardinality' => 1,
    'view mode' => 'full',
    'admin' => array(
      'edit' => 'admin/config/people/accounts',
      'manage fields' => 'admin/config/people/accounts/fields',
      'manage display' => 'admin/config/people/accounts/display',
    ),
    'form callback' => "party_user_form_user",
  );
  return $sets;
}

/**
 * Implements hook_menu()
 */
function party_user_menu() {
  $items['admin/config/party/user'] = array(
    'title' => 'User Integration',
    'description' => 'Configure Party User Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('party_user_settings_form'),
    'access arguments' => array('administer crm settings'),
    'file' => 'party_user.admin.inc',
  );

  $items['admin/config/party/user/settings'] = array(
    'title' => 'User Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('party_user_settings_form'),
    'access arguments' => array('administer crm settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'party_user.admin.inc',
  );

  $items['admin/config/party/user/sync'] = array(
    'title' => 'Sync Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('party_user_sync_form'),
    'access arguments' => array('administer crm settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'party_user.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function party_user_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'party') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_party_party_pieces().
 */
function party_user_party_party_pieces() {
  return array(
    'user' => array(
      'maker' => 'view',
      'title' => 'Account Details',
      'page callback' => 'party_view_data_set',
      'page arguments' => array(1, 'user'),
      'file' => 'party.pages.inc',
      'access callback' => TRUE,
      'access arguments' => array(1),
      'weight' => -8,
    ),
  );
}

/**
 * Menu access callback for the party user piece.
 */
function party_user_party_view_user_access($party) {
  // @todo:
  // - check user_access() for viewing user accounts
  // - check there actually is a user account to show
  // @todo:
  // nice touch, maybe: if there is no user account to show, instead offer a
  // form to connect one?
  return TRUE;
}

/**
 * Page callback for user party piece.
 */
function party_user_party_view_user($party) {
  // @todo: display the user here.
  return 'The user is shown here.';
}

/**
 * Build the User Data Set form.
 */
function party_user_form_user($form, &$form_state, &$attached_entity, $party) {
  $user_form = array();

  // If the user is set we load the edit account form.
  if ($attached_entity->eid !== NULL && $attached_entity->eid != 0) {
    module_load_include('inc', 'user', 'user.pages');
    $user_form['op'] = array(
      '#type' => 'value',
      '#value' => 'edit',
    );

    $user_form = user_profile_form($user_form, $form_state, $attached_entity->entity);
    unset($user_form['actions']);
  }
  else {
    // Mark down that we're selecting which user to connect.
    $user_form['op'] = array(
      '#type' => 'value',
      '#value' => 'select',
    );

    // Store the account uid so we can check if it changes on submit.
    $user_form['party_user_uid'] = array(
      '#type' => 'value',
      '#value' => isset($attached_entity->entity->uid) ? $attached_entity->entity->uid : NULL,
    );

    $user_form['user'] = array(
      '#type' => 'textfield',
      '#title' => t('User'),
      '#maxlength' => 60,
      '#autocomplete_path' => 'user/autocomplete',
      '#default_value' => isset($attached_entity->entity->name) ? $attached_entity->entity->name : '',
      '#weight' => -1,
      '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
    );
  }

  return $user_form;
}

/**
 * Validate the user data set form
 *
 * @todo: Implement
 */
function party_user_form_user_validate($form, &$form_state, &$attached_entity, $party) {
  return TRUE;
}

/**
 * Submit the user data set form
 */
function party_user_form_user_submit($form, &$form_state, &$attached_entity, $party) {
  $hash = $attached_entity->hash();

  $op = $form_state['values'][$hash]['op'];

  if ($op == 'select') {
    // Attempt to load a user from the given input.
    $account = user_load_by_name($form_state['values'][$hash]['user']);
    $attached_entity->detach();
    if ($account->uid != 0) {
      $attached_entity->setAttachedEntity($account);
      $attached_entity->attach($party);
    }
    return FALSE;
  }
  else if ($op == 'edit') {
    $account = $attached_entity->entity;
    $account_unchanged = clone $account;
    $category = $form[$hash]['#user_category'];

    // This code is taken out of entity_form_submit_build_entity
    // Flatten the $form_state values for the user.
    $account_values = array();
    $account_values += isset($form_state['values'][$hash]['account']) ? $form_state['values'][$hash]['account'] : array();
    $account_values += isset($form_state['values'][$hash]['signature_settings']) ? $form_state['values'][$hash]['signature_settings'] : array();
    $account_values += isset($form_state['values'][$hash]['picture']) ? $form_state['values'][$hash]['picture'] : array();

    $values_excluding_fields = array_diff_key($account_values, field_info_instances('user', 'user'));
    foreach ($values_excluding_fields as $key => $value) {
      $account->$key = $value;
    }

    field_attach_submit('user', $account, $form[$hash], $form_state);

    $edit = array_intersect_key((array) $account, $account_values);
    user_save($account_unchanged, $edit, $category);

    if ($category == 'account' && !empty($edit['pass'])) {
      // Remove the password reset tag since a new password was saved.
      unset($_SESSION['pass_reset_' . $account->uid]);
    }
    cache_clear_all();
  }
}

/**
 * Implements hook_form_FORM_ID_alter.
 *
 * Create a Party when Users Register
 */
function party_user_form_user_register_form_alter(&$form, &$form_state) {
  // Check if we're creating parties on registration
  if (variable_get('party_user_create_on_register', FALSE)) {
    // Make sure we include all the neccessary files on submit
    form_load_include($form_state, 'inc', 'party', 'party.pages');

    // Create an empty party
    $party_type = variable_get('party_user_register_party_type', 'individual');
    $party = party_create(array('type' => $party_type));

    $form_state['#party'] = $party;
    $form_state['#party_unchanged'] = $party;
    $form_state['#attached_entities'] = array();

    // Get a list of all the data sets we're expecting
    // @todo: add a setting to show these on the registration form
    $data_sets = party_get_party_data_sets($party);
    // Remove any data sets not in the registration array
    $reg_data_sets = variable_get('party_user_registration_data_sets', array());
    foreach ($data_sets as $key => $data_set) {
      if (!in_array($data_set, $reg_data_sets)) {
        unset($data_sets[$key]);
      }
    }
    // build a list of attached entities based on these data sets to embed
    // into the form
    foreach ($data_sets as $data_set) {
      $attached_entities = array();
      if (isset($party->pid)) {
        $attached_entities = party_get_attached_entities($party, $data_set);
      }

      if (count($attached_entities) < 1) {
        $attached_entity = party_get_crm_controller($data_set);
        $attached_entity->createAttachedEntity();
        $attached_entity->setParty($party);
        $attached_entities[$attached_entity->hash()] = $attached_entity;
      }

      $form_state['#attached_entities'] = array_merge($form_state['#attached_entities'], $attached_entities);
    }

    // Add extra submit handlers
    $form['#submit'][] = 'party_edit_form_submit';
    party_attached_entity_attach_form($form, $form_state);
    $form['#submit'][] = 'party_user_register_submit';
  }
}

function party_user_register_submit($form, &$form_state) {
  // Get our party from the form_state and save it
  $party = $form_state['#party'];
  $party = party_save($party);

  // Attach all the various entities
  foreach ($party->data_sets as $attached_entities) {
    foreach ($attached_entities as $attached_entity) {
      $attached_entity->attach($party);
    }
  }

  // Attach the user what we just made
  $attached_entity = party_get_crm_controller('user');
  $attached_entity->setAttachedEntity($form_state['user']);
  $attached_entity->attach($party);
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function party_user_form_profile2_type_form_alter(&$form, &$form_state) {
  if (!module_exists('party_profile')) {
    return;
  }

  unset($form['data']['registration']);
  $form['registration'] = array(
    '#markup' => 'To configure the user registration page, ' . l('click here', 'admin/config/party/user') . '.',
  );
}

// ========================================================================
// API Functions
/**
 * party_user_create_party_for_user
 *
 * Create a Party for a user and relate them
 *
 * @param mixed $user The user object or ID
 * @param array $options Hardcoded options to get passed to party_create
 *
 * @return Party a Party object
 *
 * @see party_create
 */
function party_user_create_party_for_user($user, $options = array()) {
  $default_options = array(
    'type' => variable_get('party_user_register_party_type', 'individual'),
  );

  $options += $default_options;

  $party = party_create($options);
  $attached_entity = party_get_crm_controller('user');
  $attached_entity->setAttachedEntity($user);
  $party->data_sets['user'][] = $attached_entity;

  // This will fail if a plugin that relies on anything other than user is used
  $party = party_save($party);

  $attached_entity->attach($party);
}

/**
 * Get a User's Party
 *
 * @param mixed $user The user entity or uid
 *
 * @return Party a Party Object
 */
function party_user_get_party($user) {
  if (is_object($user)) {
    $user = $user->uid;
  }

  $result = db_select('party_attached_entity', 'pae')
    ->fields('pae', array('pid'))
    ->condition('eid', $user, '=')
    ->condition('data_set', 'user')
    ->execute()
    ->fetchCol();

  $party_id = reset($result);
  return party_load($party_id);
}

/**
 * Implements hook_module_implements_alter()
 *
 * We're just going to stop profile2 from doing anything with the user page
 * for now. This should supress the thousands of errors we get on that page.
 */
function party_user_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'user_view') {
    unset($implementations['profile2']);
  }
}

/**
 * Controller class for CRM integration.
 *
 * @todo: move this to an inc file for autoloading.
 */
class UserPartyController extends EntityDefaultPartyController {
  /**
   * Display a user dataSet
   *  This is needed because user doesn't use the entity API
   */
  public function display($mode) {
    return ($this->entity->uid != 0) ? user_view($this->entity, $mode) : FALSE;
  }

  /**
   * Get the entity label
   */
  public function getLabel() {
    return format_username($this->entity);
  }
}

