<?php

/**
 * @file
 * Support for linking users to parties
 */

/**
 * Implements hook_party_data_set_info()
 */
function party_user_party_data_set_info() {
  $sets['user'] = array(
    'label' => t("User account"),
    'entity type' => 'user',
    'class' => 'PartyUserDataSet',
    'singleton' => TRUE,
    'max cardinality' => 1,
    'admin' => array(
      'edit' => 'admin/config/people/accounts',
      'manage fields' => 'admin/config/people/accounts/fields',
      'manage display' => 'admin/config/people/accounts/display',
    ),
    'form callback' => 'party_user_form_user',
    // Provide a piece corresponding to the data set.
    'piece' => array(
      'path' => 'user',
      'maker' => 'core',
      // @todo: these don't have any effect yet.
      // @see http://drupal.org/node/1669774.
      'weight' => -8,
    ),
    'actions' => array(
      'attach' => array(
        'controller' => 'PartyUserDataSetUIAttach',
        'action label' => 'Attach existing user',
      ),
      'add' => array(
        'controller' => 'PartyUserDataSetUIAdd',
        'action label' => 'Add a new user',
      ),
    ),
    // Some of our permissions require a warning.
    'permissions' => array(
      // Attaching a user account to a party potentially grants a new user
      // access to data on that party.
      'attach' => array(
        'restrict access' => TRUE,
      ),
      'edit' => array(
        'restrict access' => TRUE,
      ),
    ),
  );
  return $sets;
}

/**
 * Implements hook_menu()
 */
function party_user_menu() {
  $items['admin/config/party/user'] = array(
    'title' => 'User Integration',
    'description' => 'Configure Party User Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('party_user_settings_form'),
    'access arguments' => array('administer crm settings'),
    'file' => 'party_user.admin.inc',
  );

  $items['admin/config/party/user/settings'] = array(
    'title' => 'User Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('party_user_settings_form'),
    'access arguments' => array('administer crm settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'party_user.admin.inc',
    'weight' => -10,
  );

  $items['admin/config/party/user/sync'] = array(
    'title' => 'Sync Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('party_user_sync_form'),
    'access arguments' => array('administer crm settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'party_user.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission()
 *
 * In this case 'own' means attached to a Party the user is also attached to.
 */
function party_user_permission() {
  $permissions = array(
    'view own party' => array(
      'title' => t('View own party'),
    ),
    'edit own party' => array(
      'title' => t('Edit own party'),
    ),
  );

  // Add permissions for each data set.
  foreach (party_get_data_set_info() as $data_set_name => $data_set) {
    $permissions['view own party attached ' . $data_set_name] = array(
      'title' => t('View own party attached %name', array(
        '%name' => $data_set['label'],
      )),
    );

    $permissions['edit own party attached ' . $data_set_name] = array(
      'title' => t('Edit own party attached %name', array(
        '%name' => $data_set['label'],
      )),
    );

    $permissions['detach own party attached ' . $data_set_name] = array(
      'title' => t('Remove own party attached %name', array(
        '%name' => $data_set['label'],
      )),
    );

    $permissions['attach own party ' . $data_set_name] = array(
      'title' => t('Add own party attached %name', array(
        '%name' => $data_set['label'],
      )),
    );
  }

  return $permissions;
}

/**
 * Implements hook_party_access()
 */
function party_user_party_access($op, $party, $data_set, $account) {
  // If we haven't been passed a party, it's outside of the scope of these
  // checks.
  if (!isset($party)) {
    return NULL;
  }

  // Check if this is their own party by getting the controller and checking
  // that $account is one of the attached entities for this party.
  $controller = party_get_crm_controller($party, 'user');
  if (!in_array($account->uid, $controller->getEntityIds())) {
    return NULL;
  }

  // Set the data_set_name
  if (isset($data_set)) {
    $data_set_name = $data_set['set_name'];
  }

  // If we're looking at permission for a particular data set we check these.
  if (isset($data_set_name)) {
    // Determine which permission we need to check.
    switch ($op) {
      case 'view':
        $permission_string = 'view own party attached ' . $data_set_name;
        break;
      case 'edit':
        $permission_string = 'edit own party attached ' . $data_set_name;
        break;
      case 'detach':
        $permission_string = 'detach own party attached ' . $data_set_name;
        break;
      case 'attach':
      case 'add':
        $permission_string = 'attach own party ' . $data_set_name;
        break;
    }
  }
  else {
    // If we're not being asked about attachments, just use plain permissions.
    switch ($op) {
      case 'view':
        $permission_string = 'view own party';
        break;
      case 'edit':
        $permission_string = 'edit own party';
        break;
    }
  }


  // If we have a valid permission, check it. In this hook we only grant access
  // with the permissions, not deny it. In other words, the permission
  // 'view party attached foo' is sufficient but not neccessary, it is
  // advisable to use these blanket permissions sparingly.
  // @todo: add explanation of this to the party_access() docblock.
  if (isset($permission_string) && user_access($permission_string, $account)) {
    return TRUE;
  }

  // If we get here - say nothing.
  return NULL;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function party_user_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'party' || ($owner == 'ctools' && $plugin_type == 'relationships')) {
    return "plugins/$plugin_type";
  }
}

/**
 * Menu access callback for the party user piece.
 */
function party_user_party_view_user_access($party) {
  // @todo:
  // - check user_access() for viewing user accounts
  // - check there actually is a user account to show
  // @todo:
  // nice touch, maybe: if there is no user account to show, instead offer a
  // form to connect one?
  return TRUE;
}

/**
 * Page callback for user party piece.
 */
function party_user_party_view_user($party) {
  // @todo: display the user here.
  return 'The user is shown here.';
}

/**
 * Form to edit an attached user.
 */
function party_user_form_user($form, &$form_state, &$attached_entity, $party) {
  $user_form = array();

  module_load_include('inc', 'user', 'user.pages');

  $user_form = user_profile_form($user_form, $form_state, $attached_entity);
  unset($user_form['actions']);

  return $user_form;
}

/**
 * Validate the user data set form
 *
 * @todo: Implement
 */
function party_user_form_user_validate($form, &$form_state, &$attached_entity, $party) {
  return TRUE;
}

/**
 * Submit the user data set form
 */
function party_user_form_user_submit($form, &$form_state, $hash, &$attached_entity, $party) {
  $account = $attached_entity;
  $account_unchanged = clone $account;
  $category = $form[$hash]['#user_category'];

  // This code is taken out of entity_form_submit_build_entity
  // Flatten the $form_state values for the user.
  $account_values = array();
  $account_values += isset($form_state['values'][$hash]['account']) ? $form_state['values'][$hash]['account'] : array();
  $account_values += isset($form_state['values'][$hash]['signature_settings']) ? $form_state['values'][$hash]['signature_settings'] : array();
  $account_values += isset($form_state['values'][$hash]['picture']) ? $form_state['values'][$hash]['picture'] : array();

  $values_excluding_fields = array_diff_key($account_values, field_info_instances('user', 'user'));
  foreach ($values_excluding_fields as $key => $value) {
    $account->$key = $value;
  }

  field_attach_submit('user', $account, $form[$hash], $form_state);

  $edit = array_intersect_key((array) $account, $account_values);
  user_save($account_unchanged, $edit, $category);

  if ($category == 'account' && !empty($edit['pass'])) {
    // Remove the password reset tag since a new password was saved.
    unset($_SESSION['pass_reset_' . $account->uid]);
  }
  cache_clear_all();
}

/**
 * Implements hook_form_FORM_ID_alter.
 *
 * Create a Party when Users Register
 */
function party_user_form_user_register_form_alter(&$form, &$form_state) {
  // Check if we're creating parties on registration
  if (variable_get('party_user_create_on_register', FALSE)) {
    // Make sure we include all the neccessary files on submit
    form_load_include($form_state, 'inc', 'party', 'party.pages');

    // Create an empty party
    $party = party_create();

    // If party_hat is enabled give the party the correct hats.
    if (module_exists('party_hat')) {
      $hat_items = array();
      foreach (variable_get('party_user_registration_hats', array()) as $hat_name) {
        $hat_items[]['hat_name'] = $hat_name;
      }
      $party->party_hat[LANGUAGE_NONE] = $hat_items;
    }

    $form_state['#party'] = $party;
    $form_state['#party_unchanged'] = $party;
    $form_state['#attached_entities'] = array();

    // Get a list of all the data sets we're expecting
    // @todo: add a setting to show these on the registration form
    $data_sets = party_get_party_data_sets($party);
    // Remove any data sets not in the registration array
    $reg_data_sets = variable_get('party_user_registration_data_sets', array());
    foreach ($data_sets as $key => $data_set) {
      if (!in_array($data_set, $reg_data_sets)) {
        unset($data_sets[$key]);
      }
    }
    // build a list of attached entities based on these data sets to embed
    // into the form
    foreach ($data_sets as $data_set) {
      $attached_entities = array();
      if (isset($party->pid)) {
        $attached_entities = party_get_attached_entities($party, $data_set);
      }

      if (count($attached_entities) < 1) {
        $data_set_controller = party_get_crm_controller($party, $data_set);
        $data_set_controller->createAttachedEntity();
        $data_set_controller->setParty($party);
        $attached_entities[$data_set_controller->hash()] = $data_set_controller;
      }

      $form_state['#attached_entities'] = array_merge($form_state['#attached_entities'], $attached_entities);
    }

    // Add extra submit handlers
    $form['#submit'][] = 'party_edit_form_submit';
    party_attached_entity_attach_form($form, $form_state);
    $form['#submit'][] = 'party_user_register_submit';
  }
}

function party_user_register_submit($form, &$form_state) {
  // Get our party from the form_state and save it
  $party = $form_state['#party'];
  $party = party_save($party);

  // Load our attached data sets
  $data_sets = party_get_party_data_sets($party);
  $data_set_info = party_get_data_set_info();

  foreach ($data_sets as $data_set) {
    if (!empty($party->data_sets[$data_set])) {
      $data_set_controller = party_get_crm_controller($party, $data_set);
      foreach ($party->data_sets[$data_set] as $entity) {
        $data_set_controller->attachEntity($entity);
      }
      $data_set_controller->save();
    }
  }

  // Attach the user what we just made
  $data_set_controller = party_get_crm_controller($party, 'user');
  $data_set_controller->attachEntity($form_state['user']);
  $data_set_controller->save($party);
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function party_user_form_profile2_type_form_alter(&$form, &$form_state) {
  if (!module_exists('party_profile')) {
    return;
  }

  unset($form['data']['registration']);
  $form['registration'] = array(
    '#markup' => 'To configure the user registration page, ' . l('click here', 'admin/config/party/user') . '.',
  );
}

/**
 * Implements hook_user_view().
 *
 * Add party action links to the user.
 */
function party_user_user_view($account, $view_mode, $langcode) {
  if ($view_mode == 'party') {
    $party = party_user_get_party($account);

    $data_set_controller = party_get_crm_controller($party, 'user');

    $account->content['party_actions'] = array(
      '#theme' => 'links',
      '#links' => $data_set_controller->getActions($party->pid, $account->uid),
      '#attributes' => array(
        'class' => array('links inline crm-set-action-links'),
      ),
      '#weight' => 100,
    );
  }
}

// ========================================================================
// API Functions
/**
 * party_user_create_party_for_user
 *
 * Create a Party for a user and relate them
 *
 * @param mixed $user The user object or ID
 * @param array $options Hardcoded options to get passed to party_create
 *
 * @return Party a Party object
 *
 * @see party_create
 */
function party_user_create_party_for_user($user, $options = array()) {
  $party = party_create($options);
  $party = party_save($party);
  $data_set_controller = party_get_crm_controller($party, 'user');
  $data_set_controller->attachEntity($user);
  $data_set_controller->save();

  // This will fail if a plugin that relies on anything other than user is used
  $party = party_save($party);
}

/**
 * Get a User's Party
 *
 * @param mixed $user The user entity or uid
 *
 * @return Party a Party Object
 */
function party_user_get_party($user) {
  if (is_object($user)) {
    $user = $user->uid;
  }

  $result = db_select('party_attached_entity', 'pae')
    ->fields('pae', array('pid'))
    ->condition('eid', $user, '=')
    ->condition('data_set', 'user')
    ->execute()
    ->fetchCol();

  $party_id = reset($result);
  return party_load($party_id);
}

/**
 * Implements hook_module_implements_alter()
 *
 * We're just going to stop profile2 from doing anything with the user page
 * for now. This should supress the thousands of errors we get on that page.
 */
function party_user_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'user_view') {
    unset($implementations['profile2']);
  }
}
