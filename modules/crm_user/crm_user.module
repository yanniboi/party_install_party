<?php

/**
 * @file
 * Support for linking users to parties
 */

/**
 * Implements hook_entity_info_alter().
 */
function crm_user_entity_info_alter(&$entity_info) {
  $entity_info['user']['crm controller class'] = 'UserCRMController';
  // Pass this on to the controller class to make further changes.
  UserCRMController::hook_entity_info_alter($entity_info['user']);
}

/**
 * Implements hook_crm_party_data_set_info()
 */
function crm_user_crm_party_data_set_info() {
  $sets['user'] = array(
    'label' => t("User account"),
    'entity type' => 'user',
    'class' => 'UserCRMController',
    'singleton' => TRUE,
    'max cardinality' => 1,
    'load callback' => "crm_user_load_user",
    'form callback' => "crm_user_form_user",
  );
  return $sets;
}

/**
 * Implements hook_crm_party_party_pieces().
 */
function crm_user_crm_party_party_pieces() {
  return array(
    'user' => array(
      'title' => 'User',
      'page callback' => 'crm_party_view_data_set',
      'page arguments' => array(1, 'user'),
      'file' => 'crm_party.pages.inc', 
      'access callback' => TRUE,
      'access arguments' => array(1),
      'weight' => -8,
    ),
  );
}

/**
 * Menu access callback for the party user piece.
 */
function crm_user_party_view_user_access($party) {
  // @todo:
  // - check user_access() for viewing user accounts
  // - check there actually is a user account to show
  // @todo:
  // nice touch, maybe: if there is no user account to show, instead offer a 
  // form to connect one?
  return TRUE;
}

/**
 * Page callback for user party piece.
 */
function crm_user_party_view_user($party) {
  // @todo: display the user here.
  return 'The user is shown here.';
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Alter Party forms to do things
 */
function crm_user_form_crm_party_edit_form_alter(&$form, &$form_state, $form_id) {
  $party = $form['#party'];
  // For an existing party, get the related user account if there is one.
  if (isset($party->pid)) {
    $attached_entities = crm_party_get_attached_entities($party, 'user');
    // We know we're a singleton data set so we can just pop off the one result.
    $account = array_pop($attached_entities)->entity;
  }

  // Store the account uid so we can check if it changes on submit.
  $form['crm_user_uid'] = array(
    '#type' => 'value',
    '#value' => isset($account) ? $account->uid : NULL,
  );

  $form['user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => isset($account) ? $account->name : '',
    '#weight' => -1,
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
  );

  $form['#submit'][] = 'crm_user_post_form_submit_relate';
}

/**
 * Relate the user entities to the crm_party in form_state
 */
function crm_user_post_form_submit_relate($form, &$form_state) {
  $original_uid = $form_state['values']['crm_user_uid'];

  // Attempt to load a user from the given input.
  $account = user_load_by_name($form_state['values']['user']);
  // Fall back to the anonymous user.
  if (!$account) {
    $account = user_load(0);
  }

  // Only alter our records if something has changed.
  if ($original_uid != $account->uid) {
    $party = $form_state['crm_party'];

    // Unrelate the original user, then relate the new one.
    // In both cases, only act on non-anonymous accounts: that is not stored.
    if ($original_uid) {
      crm_party_unrelate($party, $original_uid, 'user');
    }
    if ($account->uid) {
      crm_party_relate($party, $account, 'user');
    }
  }
}

function crm_user_user_add_form_submit($form, &$form_state) {
  // Attempt to load a user from the given input.
  $account = user_load_by_name($form_state['values']['user']);
  // Put the account in the entity part of the $form state.
  $form_state['entity'] = $account;  
}

function crm_user_user_edit_form_submit($form, &$form_state) {
  $form_state['entity'] = $form_state['user'];
}  

/**
 * Controller class for CRM integration.
 *
 * @todo: move this to an inc file for autoloading.
 */
class UserCRMController extends EntityDefaultCRMController {
  const ENTITY_TYPE = "user";
  const ENTITY_ID_KEY = "uid";
  
  // @todo remove
  const VIEW_MODE = "full";

  public function form(&$form, &$form_state) {
    if ($this->eid !== NULL) {
      module_load_include('inc', 'user', 'user.pages');
      $form = user_profile_form($form, $form_state, $this->entity);
      unset($form['actions']);
      
      $form['#submit'][] = 'crm_user_user_edit_form_submit';
    }
    else {
      // Store the account uid so we can check if it changes on submit.
      $form['crm_user_uid'] = array(
        '#type' => 'value',
        '#value' => isset($this->entity) ? $this->entity->uid : NULL,
      );

      $form['user'] = array(
        '#type' => 'textfield',
        '#title' => t('User'),
        '#maxlength' => 60,
        '#autocomplete_path' => 'user/autocomplete',
        '#default_value' => isset($this->entity) ? $this->entity->name : '',
        '#weight' => -1,
        '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
      );
      
      $form['#submit'][] = 'crm_user_user_add_form_submit';
    }
  }
  
  /**
   * Display a user dataSet
   *  This is needed because user doesn't use the entity API
   */
  public function display($mode) {
    return user_view($this->entity, $mode);
  }
  
  /**
   * Get the entity label
   */
  public function getLabel() {
    return format_username($this->entity);
  }
}

