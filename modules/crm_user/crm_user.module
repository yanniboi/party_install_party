<?php

/**
 * @file
 * Support for linking users to parties
 */
 
/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Alter Party forms to do things
 */
function crm_user_form_crm_party_edit_form_alter(&$form, &$form_state, $form_id) {
  // Make sure the uid is null. 
  $form['user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'), 
    '#maxlength' => 60, 
    '#autocomplete_path' => 'user/autocomplete', 
    '#default_value' => '', 
    '#weight' => -1, 
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
  );
  
  $form['#submit'][] = 'crm_user_post_form_submit_relate';
}

/**
 * Relate the user entities to the crm_party in form_state
 */
function crm_user_post_form_submit_relate($form, &$form_state) {
  // Attempt to load a user from the given input.
  $account = user_load_by_name($form_state['values']['user'];
  // Fall back to the anonymous user.
  // @todo: why not just not make a relation at this point??
  if (!$account) {
    $account = user_load(0);
  }
  
  $party = $form_state['crm_party'];
  _crm_party_user_relate($party, $account);
}

/**
 * Relate a party entity to a user entity.
 *
 * @param $party
 *   A fully loaded party object, from crm_party_load(). Whats important is that the pid is correct.
 * @param $user
 *   A user object from user_load();
 */
function _crm_party_user_relate($party, $account) {
  $endpoints = array();
  $endpoints[] = array(
    'entity_type' => 'crm_party',
    'entity_id' => $party->pid,
  );
  $endpoints[] = array(
    'entity_type' => 'user',
    'entity_id' => $account->uid,
  );
  
  //create a relation for each party profile2 which is created.
  $relation = relation_create('party_to_user', $endpoints);
  $rid = relation_save($relation);
  
  //set some nice messages - change
  drupal_set_message('Party: ' . $party->label . ' has been related to User: ' . $account->name);
}
