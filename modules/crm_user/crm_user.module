<?php

/**
 * @file
 * Support for linking users to parties
 */

/**
 * Implements hook_crm_party_data_set_info()
 */
function crm_user_crm_party_data_set_info() {
  $sets['user'] = array(
    'label' => t("User account"),
    'entity type' => 'user',
    'class' => 'UserDataSet',
    'singleton' => TRUE,
    'load callback' => "crm_user_load_user",
    'form callback' => "crm_user_form_user",
  );
  return $sets;
}

/**
 * Implements hook_crm_party_party_pieces().
 */
function crm_user_crm_party_party_pieces() {
  return array(
    'user' => array(
      'title' => 'User',
      'page callback' => 'crm_user_party_view_user',
      'page arguments' => array(1),
      'access callback' => 'crm_user_party_view_user_access',
      'access arguments' => array(1),
      'weight' => -8,
    ),
  );
}

/**
 * Menu access callback for the party user piece.
 */
function crm_user_party_view_user_access($party) {
  // @todo:
  // - check user_access() for viewing user accounts
  // - check there actually is a user account to show
  // @todo:
  // nice touch, maybe: if there is no user account to show, instead offer a 
  // form to connect one?
  return TRUE;
}

/**
 * Page callback for user party piece.
 */
function crm_user_party_view_user($party) {
  // @todo: display the user here.
  return 'The user is shown here.';
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Alter Party forms to do things
 */
function crm_user_form_crm_party_edit_form_alter(&$form, &$form_state, $form_id) {
  $party = $form['#party'];
  // For an existing party, get the related user account if there is one.
  if (isset($party->pid)) {
    $entities = crm_party_data_set_load($party, 'user');
    // We know we're a singleton data set so we can just pop off the one result.
    $account = array_pop($entities);
  }

  // Store the account uid so we can check if it changes on submit.
  $form['crm_user_uid'] = array(
    '#type' => 'value',
    '#value' => isset($account) ? $account->uid : NULL,
  );

  $form['user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => isset($account) ? $account->name : '',
    '#weight' => -1,
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
  );

  $form['#submit'][] = 'crm_user_post_form_submit_relate';
}

/**
 * Relate the user entities to the crm_party in form_state
 */
function crm_user_post_form_submit_relate($form, &$form_state) {
  $original_uid = $form_state['values']['crm_user_uid'];

  // Attempt to load a user from the given input.
  $account = user_load_by_name($form_state['values']['user']);
  // Fall back to the anonymous user.
  if (!$account) {
    $account = user_load(0);
  }

  // Only alter our records if something has changed.
  if ($original_uid != $account->uid) {
    $party = $form_state['crm_party'];

    // Unrelate the original user, then relate the new one.
    // In both cases, only act on non-anonymous accounts: that is not stored.
    if ($original_uid) {
      crm_party_unrelate($party, $original_uid, 'user', 'user');
    }
    if ($account->uid) {
      crm_party_relate($party, $account, 'user', 'user');
    }
  }
}

/**
 * Relate a party entity to a user entity.
 *
 * @todo obsolete!
 *
 * @param $party
 *   A fully loaded party object, from crm_party_load(). Whats important is that the pid is correct.
 * @param $user
 *   A user object from user_load();
 */
function _crm_party_user_relate($party, $account) {
  $endpoints = array();
  $endpoints[] = array(
    'entity_type' => 'crm_party',
    'entity_id' => $party->pid,
  );
  $endpoints[] = array(
    'entity_type' => 'user',
    'entity_id' => $account->uid,
  );
  
  //create a relation for each party profile2 which is created.
  $relation = relation_create('party_to_user', $endpoints);
  $rid = relation_save($relation);
  
  //set some nice messages - change
  drupal_set_message('Party: ' . $party->label . ' has been related to User: ' . $account->name);
}

/**
 * UserDataSet
 *  The user data set wrapper class
 */
class UserDataSet extends CRMPartyDataSet {
   
  const ENTITY_TYPE = "user";
  const ENTITY_ID_KEY = "uid";

}