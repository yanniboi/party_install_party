<?php

/**
 * @file
 * Contains install hooks for the CRM party module.
 */

/**
 * Exportable schema fields
 */
function party_exportable_schema_fields() {
  return array(
    'status' => array(
      'type' => 'int', 
      'not null' => TRUE,
      // Set the default to ENTITY_CUSTOM without using the constant as it is
      // not safe to use it at this point. 
      'default' => 0x01, 
      'size' => 'tiny', 
      'description' => 'The exportable status of the entity.',
    ), 
    'module' => array(
      'description' => 'The name of the providing module if the entity has been defined in code.', 
      'type' => 'varchar', 
      'length' => 255, 
      'not null' => FALSE,
    ),
  );
}
 
/**
 * Implements hook_schema().
 */
function party_schema() {
  $schema['party'] = array(
    'description' => 'Stores Id, name and email for party contacts',
    'fields' => array(
      'pid' => array(
        'description' => 'Primary key for the party.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The party type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'A label for the party. This is generated by one of a number of plugins.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'merged' => array(
        'description' => 'Boolean flag for whether this party has been merged with another',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'merged_party' => array(
        'description' => 'The pid of the party this has been merged into',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ) + party_exportable_schema_fields(),
    'primary key' => array('pid'),
  );

  $schema['party_party_pieces'] = array(
    'description' => 'Stores relationships between party (types) and party pieces',
    'fields' => array(
      'instance_id' => array(
        'description' => 'Primary key for the party piece instance.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'parent_id' => array(
        'description' => 'The id of the parent party piece instance.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The title of this party piece',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'party_type' => array(
        'description' => 'The party type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'party_piece' => array(
        'description' => 'The party piece type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'arguments' => array(
        'description' => 'Any extra filters or arguments the party piece should apply. In json format.',
        'type' => 'text',
        'not null' => true,
      ),
      'weight' => array(
        'description' => 'The ordering number of the party piece',
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ),
    ),
    'primary key' => array('instance_id'),
  );


  // New, WIP table to connect parties to attached entities.
  $schema['party_attached_entity'] = array(
    'description' => "This links parties to attached entities.",
    'fields' => array(
      'delta' => array(
        'description' => 'The delta of this attached entity, so that every record in the table is unique',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'The id of the party entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'eid' => array(
        'description' => 'The id of the attached entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data_set' => array(
        'description' => 'The data set this entity falls under.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The type of the attached entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_bundle' => array(
        'description' => 'The bundle of the attached entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'hat_main' => array(
        'description' => 'Is this the main set for this hat.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hat' => array(
        'description' => 'The hat this is associated with.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'all',
      ),
    ),
    'indexes' => array(
      'party' => array('pid'),
      'entity' => array('eid'),
    ),
    'primary key' => array('pid', 'data_set', 'delta'),
  );

  return $schema;
}

/**
 * Add new attached entit table
 */
function party_update_7004() {
 // New, WIP table to connect parties to attached entities.
  $schema = array(
    'description' => "This links parties to attached entities.",
    'fields' => array(
      // @todo: do we need this?
      'peid' => array(
        'description' => 'The unique ID for this relationship.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The id of the party entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'eid' => array(
        'description' => 'The id of the attached entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data_set' => array(
        'description' => 'The data set this entity falls under.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The type of the attached entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_bundle' => array(
        'description' => 'The bundle of the attached entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'main' => array(
        'description' => 'Flags a relation as being to the main attached entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hat_main' => array(
        'description' => 'Is this the main set for this hat.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hat' => array(
        'description' => 'The hat this is associated with.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'all',
      ),
    ),
    'indexes' => array(
      'party' => array('pid'),
      'entity' => array('eid'),
    ),
    'primary key' => array('peid'),
  ); 
  
  db_create_table("party_attached_entity", $schema);  
}

/**
 * Add the required field to the hats table
 * @todo Make it so thaat you can set hats as required for different Party Types
 */
function party_update_7003() {
  db_add_field('party_hats','required', array(
        'description' => 'This Hat is required',
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      )
    );
}
 
/**
 * Add the hat data set settings table
 * @todo Do we need phdsid?
 */ 
function party_update_7002() {
  $schema = array(
    'description' => 'Store data set settings for hats',
    'fields' => array(
      'phdsid' => array(
        'description' => 'Primary key for the setting.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'hat' => array(
        'description' => 'The machine readable name of the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'data_set' => array(
        'description' => 'The machine readable name of the data_Set',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'rule' => array(
        'description' => 'The Party Id',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE
      ),
    ),
    'primary key' => array('phdsid'),
  );
  
  db_create_table("party_hat_data_set_rules", $schema);
}

/**
 * Add the hattings table
 * Do we need the phid column?
 */ 
function party_update_7001() {
  // Obsolete.
  // Will be removed in http://drupal.org/node/1383920.
}
 
/**
 * Add the party hats table.
 */
function party_update_7000() {
  //schema for the hats
  $schema = array(
    'description' => 'Stores hat definitions',
    'fields' => array(
      'hid' => array(
        'description' => 'Primary key for the hat.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine readable name of the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'A human readable name for the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ) + entity_exportable_schema_fields(),
    ),
    'primary key' => array('hid'),
  );
  
  db_create_table("party_hats", $schema);
}

/**
 * Add exportable schema fields
 */
function party_update_7005() {
  db_add_field('party','status', array(
      'type' => 'int', 
      'not null' => TRUE,
      // Set the default to ENTITY_CUSTOM without using the constant as it is
      // not safe to use it at this point. 
      'default' => 0x01, 
      'size' => 'tiny', 
      'description' => 'The exportable status of the entity.',
    ));
    
  db_add_field('party','module', array(
      'description' => 'The name of the providing module if the entity has been defined in code.', 
      'type' => 'varchar', 
      'length' => 255, 
      'not null' => FALSE,
    ));
}

/**
 * Add merged and merged_party fields
 */
function party_update_7006() {
  db_add_field('party', 'merged', array(
    'description' => 'Boolean flag for whether this party has been merged with another',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
  db_add_field('party', 'merged_party', array(
    'description' => 'The pid of the party this has been merged into',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Add Attached Entity delta field
 */
function party_update_7007() {
  $spec = array(
    'description' => 'The delta of this attached entity, so that every record in the table is unique',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  
  $keys = array(
    'indexes' => array(
      'party' => array('pid'),
      'entity' => array('eid'),
    ),
    'primary key' => array('pid', 'data_set', 'delta'),
  );
  
  db_drop_field('party_attached_entity', 'peid');
  db_drop_primary_key('party_attached_entity');
  db_add_field('party_attached_entity', 'delta', $spec, $keys);
}

/**
 * Remove the main field
 */
function party_update_7008() {
  db_drop_field('party_attached_entity', 'main');
}