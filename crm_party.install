<?php

/**
 * @file
 * Contains install hooks for the CRM party module.
 */

/**
 * Implements hook_schema().
 */
function crm_party_schema() {
  $schema['crm_party'] = array(
    'description' => 'Stores Id, name and email for party contacts',
    'fields' => array(
      'pid' => array(
        'description' => 'Primary key for the party.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The party type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'A label for the party. This is generated by one of a number of plugins.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ) + entity_exportable_schema_fields(),
    ),
    'primary key' => array('pid'),
  );

  $schema['crm_party_party_pieces'] = array(
    'description' => 'Stores relationships between party (types) and party pieces',
    'fields' => array(
      'instance_id' => array(
        'description' => 'Primary key for the party piece instance.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'parent_id' => array(
        'description' => 'The id of the parent party piece instance.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The title of this party piece',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'party_type' => array(
        'description' => 'The party type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'party_piece' => array(
        'description' => 'The party piece type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'arguments' => array(
        'description' => 'Any extra filters or arguments the party piece should apply. In json format.',
        'type' => 'text',
        'not null' => true,
      ),
      'weight' => array(
        'description' => 'The ordering number of the party piece',
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ),
    ),
    'primary key' => array('instance_id'),
  );

  //This table is how we link party pieces to party types and weight them etc

  /*$schema['crm_party_type'] = array(
    'description' => 'Stores information about defined party types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique model type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this crm party type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this crm party type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this model type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this model type.',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );*/

  // New, WIP table to connect parties to attached entities.
  $schema['crm_party_attached_entity'] = array(
    'description' => "This links parties to attached entities.",
    'fields' => array(
      // @todo: do we need this?
      'peid' => array(
        'description' => 'The unique ID for this relationship.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The id of the party entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'eid' => array(
        'description' => 'The id of the attached entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data_set' => array(
        'description' => 'The data set this entity falls under.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The type of the attached entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_bundle' => array(
        'description' => 'The bundle of the attached entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'main' => array(
        'description' => 'Flags a relation as being to the main attached entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hat_main' => array(
        'description' => 'Is this the main set for this hat.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hat' => array(
        'description' => 'The hat this is associated with.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'all',
      ),
    ),
    'indexes' => array(
      'party' => array('pid'),
      'entity' => array('eid'),
    ),
    'primary key' => array('peid'),
  );

  return $schema;
}

/**
 * Add new attached entit table
 */
function crm_party_update_7004() {
 // New, WIP table to connect parties to attached entities.
  $schema = array(
    'description' => "This links parties to attached entities.",
    'fields' => array(
      // @todo: do we need this?
      'peid' => array(
        'description' => 'The unique ID for this relationship.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The id of the party entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'eid' => array(
        'description' => 'The id of the attached entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data_set' => array(
        'description' => 'The data set this entity falls under.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The type of the attached entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_bundle' => array(
        'description' => 'The bundle of the attached entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'main' => array(
        'description' => 'Flags a relation as being to the main attached entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hat_main' => array(
        'description' => 'Is this the main set for this hat.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hat' => array(
        'description' => 'The hat this is associated with.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'all',
      ),
    ),
    'indexes' => array(
      'party' => array('pid'),
      'entity' => array('eid'),
    ),
    'primary key' => array('peid'),
  ); 
  
  db_create_table("crm_party_attached_entity", $schema);  
}

/**
 * Add the required field to the hats table
 * @todo Make it so thaat you can set hats as required for different Party Types
 */
function crm_party_update_7003() {
  db_add_field('crm_party_hats','required', array(
        'description' => 'This Hat is required',
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      )
    );
}
 
/**
 * Add the hat data set settings table
 * @todo Do we need phdsid?
 */ 
function crm_party_update_7002() {
  $schema = array(
    'description' => 'Store data set settings for hats',
    'fields' => array(
      'phdsid' => array(
        'description' => 'Primary key for the setting.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'hat' => array(
        'description' => 'The machine readable name of the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'data_set' => array(
        'description' => 'The machine readable name of the data_Set',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'rule' => array(
        'description' => 'The Party Id',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE
      ),
    ),
    'primary key' => array('phdsid'),
  );
  
  db_create_table("crm_party_hat_data_set_rules", $schema);
}

/**
 * Add the hattings table
 * Do we need the phid column?
 */ 
function crm_party_update_7001() {
  $schema = array(
    'description' => 'Stores hattings (relationships between hats and parties)',
    'fields' => array(
      'phid' => array(
        'description' => 'Primary key for the hatting.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'hat' => array(
        'description' => 'The machine readable name of the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'party' => array(
        'description' => 'The Party Id',
        'type' => 'int',
        'not null' => TRUE
      ),
    ),
    'primary key' => array('phid'),
  );
  
  db_create_table("crm_party_hattings", $schema);
}
 
/**
 * Add the party hats table.
 */
function crm_party_update_7000() {
  //schema for the hats
  $schema = array(
    'description' => 'Stores hat definitions',
    'fields' => array(
      'hid' => array(
        'description' => 'Primary key for the hat.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine readable name of the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'A human readable name for the hat',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ) + entity_exportable_schema_fields(),
    ),
    'primary key' => array('hid'),
  );
  
  db_create_table("crm_party_hats", $schema);
}
