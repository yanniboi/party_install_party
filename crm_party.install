<?php

/**
 * @file
 * Contains install hooks for the CRM party module.
 */

/**
 * Implements hook_schema().
 */
function crm_party_schema() {
  $schema['crm_party'] = array(
    'description' => 'Stores Id, name and email for party contacts',
    'fields' => array(
      'pid' => array(
        'description' => 'Primary key for the party.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The party type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'A label for the party. This is generated by one of a number of plugins.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ) + entity_exportable_schema_fields(),
    ),
    'primary key' => array('pid'),
  );
  
  $schema['crm_party_party_pieces'] = array(
    'description' => 'Stores relationships between party (types) and party pieces',
    'fields' => array(
      'instance_id' => array(
        'description' => 'Primary key for the party piece instance.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'parent_id' => array(
        'description' => 'The id of the parent party piece instance.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The title of this party piece',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'party_type' => array(
        'description' => 'The party type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'party_piece' => array(
        'description' => 'The party piece type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'arguments' => array(
        'description' => 'Any extra filters or arguments the party piece should apply. In json format.',
        'type' => 'text',
        'not null' => true,
      ),
      'weight' => array(
        'description' => 'The ordering number of the party piece',
        'type' => 'int',
        'not null' => true,
        'default' => 0,
      ),
    ),
    'primary key' => array('instance_id'),
  );
  
  //This table is how we link party pieces to party types and weight them etc

  /*$schema['crm_party_type'] = array(
    'description' => 'Stores information about defined party types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique model type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this crm party type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this crm party type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this model type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this model type.',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );*/

  // Declare relation tables, based on the data sets declared by
  // hook_crm_party_data_set_info().
  // This adds nothing at at install time, because we don't declare any data
  // sets ourselves, and dependent modules aren't enabled yet.
  // However, it ensures our declared database schema is consistent with the
  // tables we create dynamically.
  // We manage these tables ourselves so that we have control over the
  // implementation and can seamlessly upgrade all the relation tables should
  // it be necessary to change the schema in future versions.
  // If this is invoked during uninstall, we need to load module files.
  /*

  // Commenting this out as it leads to horrendous breakages
  // when crm_profile is installed.
  // @see http://drupal.org/node/1302484.
  // This leaves us with our schema our of sync as we create tables we
  // don't declare here, which is bad but not disastrous.
  // @todo: fix this!

  drupal_load('module', 'crm_party');
  $sets = crm_party_get_data_set_info();

  // Create a database schema from each set using our template.
  foreach ($sets as $key => $set) {
    $schema += crm_party_data_set_schema_template($key);
  }
  */

  return $schema;
}

/**
 * Implements hook_modules_installed().
 *
 * When a newly installed module provides CRM party data sets, create the
 * corresponding tables.
 *
 * Despite a lack of documentation, comment module seems to confirm this hook
 * goes in the install file. Bug in Drupal core! http://drupal.org/node/633332
 */
function crm_party_modules_installed($modules) {
  // Get the data sets declared by the modules being installed.
  $sets = array();
  foreach ($modules as $module) {
    if (module_hook($module, 'crm_party_data_set_info')) {
      $sets += module_invoke($module, 'crm_party_data_set_info');
    }
  }

  foreach ($sets as $set_name => $set) {
    $schema = crm_party_data_set_schema_template($set_name);
    // This is ugly as it's always a singleton array.
    // @todo clean this up with a helper function that gets all the schemas
    // for a list of sets?
    foreach ($schema as $name => $table) {
      db_create_table($name, $table);
    }
  }
}

/**
 * Implements hook_modules_uninstalled().
 *
 * Drop the tables created for relations for the data sets provided by
 * modules being uninstalled.
 */
function crm_party_modules_uninstalled($modules) {
  $sets = array();
  foreach ($modules as $module) {
    // During uninstall we need to load module files.
    drupal_load('module', $module);
    if (module_hook($module, 'crm_party_data_set_info')) {
      $sets += module_invoke($module, 'crm_party_data_set_info');
    }
  }

  foreach ($sets as $set_name => $set) {
    $schema = crm_party_data_set_schema_template($set_name);
    // This is ugly as it's always a singleton array.
    foreach ($schema as $name => $table) {
      // And we don't need the schema for this, but keeping it symmetric
      // offers hope of future refactoring ;)
      db_drop_table($name);
    }
  }
}

/**
 * Helper function to provide a database schema for party set relation tables.
 *
 * Modules that provide a party set should use this function to create the
 * party set relation table in their hook_schema().
 *
 * @see crm_user_schema() for an example.
 *
 * @param $set_name
 *  The machine name of the party data set.
 */
function crm_party_data_set_schema_template($set_name) {
  $schema_template = array(
    'crm_party_set_' . $set_name => array(
      'description' => "This links parties to data sets of type $set_name.",
      'fields' => array(
        'peid' => array(
          'description' => 'The unique ID for this relationship.',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'pid' => array(
          'description' => 'The id of the party entity.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'eid' => array(
          'description' => 'The id of the related entity.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'main' => array(
          'description' => 'Flags a relation as being to the main item.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'hat_main' => array(
          'description' => 'Is this the main set for this hat.',
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'hat' => array(
          'description' => 'The hat this is associated with.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => 'all',
        ),
      ),
      'indexes' => array(
        'party' => array('pid'),
        'entity' => array('eid'),
      ),
      'primary key' => array('peid'),
    ),
  );

  return $schema_template;
}
